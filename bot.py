import discord
from discord.ext import commands
import pandas as pd
import openai
import random
import asyncio
import os
from dotenv import load_dotenv

# === LOAD ENV VARIABLES ===
load_dotenv()
client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')

# Load updated skill matrix
matrix = pd.read_csv('Skill Matrix Software PM.csv')

# Create the bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

# === UTILITY FUNCTIONS ===
def generate_star_question(skill_row):
    skill = skill_row['Skill']
    description = skill_row.get('Description', '')
    prompt = (
        f"–ó–≥–µ–Ω–µ—Ä—É–π —Å–∏—Ç—É–∞—Ü—ñ–π–Ω–µ —ñ–Ω—Ç–µ—Ä–≤ º—é —É —Ñ–æ—Ä–º–∞—Ç—ñ STAR –¥–ª—è Project Manager —É Software/IT.\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –Ω–∞–≤–∏—á–∫—É: {skill}.\n"
        f"–û–ø–∏—à–∏ –ª–∏—à–µ Situation —ñ Task. –ó–∞–≤–µ—Ä—à–∏ —Ñ—Ä–∞–∑–æ—é: '–©–æ –≤–∏ –∑—Ä–æ–±–∏—Ç–µ?'\n"
        f"–û–ø–∏—Å –Ω–∞–≤–∏—á–∫–∏: {description}"
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def evaluate_answer(skill_row, user_answer):
    skill = skill_row['Skill']
    basic = skill_row.get('Level Basic', '')
    strong = skill_row.get('Level Strong', '')
    advanced = skill_row.get('Level Advanced', '')
    prompt = (
        f"–û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞ –Ω–∞–≤–∏—á–∫–æ—é: {skill}.\n"
        f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {user_answer}\n"
        f"–ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω–∫–∏:\n"
        f"- –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: {basic}\n"
        f"- –°–∏–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {strong}\n"
        f"- –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π —Ä—ñ–≤–µ–Ω—å: {advanced}\n"
        f"–ó—Ä–æ–±–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Result), –æ—Ü—ñ–Ω–∫—É —Ä—ñ–≤–Ω—è (Basic/Strong/Advanced) —Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—ñ–¥–±–µ–∫."
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def generate_sample_answer(skill_row):
    skill = skill_row['Skill']
    description = skill_row.get('Description', '')
    prompt = (
        f"–ó–≥–µ–Ω–µ—Ä—É–π –ø—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞ –Ω–∞–≤–∏—á–∫–æ—é {skill} —É —Ñ–æ—Ä–º–∞—Ç—ñ STAR, –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –¥—ñ—ó (Action). –û–ø–∏—Å –Ω–∞–≤–∏—á–∫–∏: {description}"
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def generate_resources(skill_row):
    skill = skill_row['Skill']
    prompt = (
        f"–î–∞–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ—ó –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∏, –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ñ–≤ —ñ –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ–π –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏: {skill} (Project Management —É —Å—Ñ–µ—Ä—ñ IT/Software)."
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

# === MAIN BOT LOGIC ===
user_sessions = {}

@bot.command()
async def start(ctx):
    user_id = ctx.author.id
    selected_skills = matrix.sample(10).reset_index(drop=True)
    user_sessions[user_id] = {
        'skills': selected_skills,
        'current': 0,
        'results': []
    }
    await ctx.send("üöÄ –°–µ—Å—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ! –ì–æ—Ç–æ–≤—ñ –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ —ñ–Ω—Ç–µ—Ä–≤'—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /next —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")

@bot.command()
async def next(ctx):
    user_id = ctx.author.id
    if user_id not in user_sessions:
        await ctx.send("‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /start")
        return

    session = user_sessions[user_id]
    session['hint_used'] = False
    skill_row = session['skills'].iloc[session['current']]
    question = generate_star_question(skill_row)
    session['current_question'] = question
    session['current_skill'] = skill_row

    await ctx.send(f"**–ü–∏—Ç–∞–Ω–Ω—è:**\n{question}")

@bot.command()
async def hint(ctx):
    user_id = ctx.author.id
    session = user_sessions.get(user_id)
    if session and 'current_skill' in session:
        if session.get('hint_used'):
            await ctx.send("‚ÑπÔ∏è –ü—ñ–¥–∫–∞–∑–∫–∞ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /next –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.")
            return

        skill_row = session['current_skill']
        prompt = f"–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –ø—ñ–¥–∫–∞–∑–∫—É –∞–±–æ –Ω–∞—Ç—è–∫, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –Ω–∞–≤–∏—á–∫–æ—é: {skill_row['Skill']}\n–û–ø–∏—Å –Ω–∞–≤–∏—á–∫–∏: {skill_row['Description']}"
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        hint_text = response.choices[0].message.content
        session['hint_used'] = True
        await ctx.send(f"üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:**\n{hint_text}")
    else:
        await ctx.send("‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /next –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è")

@bot.command()
async def skip(ctx):
    user_id = ctx.author.id
    if user_id in user_sessions:
        user_sessions[user_id]['current'] += 1
        await next(ctx)
    else:
        await ctx.send("‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /start")

@bot.command()
async def answer(ctx):
    user_id = ctx.author.id
    session = user_sessions.get(user_id)
    if session and 'current_skill' in session:
        sample = generate_sample_answer(session['current_skill'])
        if len(sample) > 2000:
            for i in range(0, len(sample), 2000):
                await ctx.send(sample[i:i+2000])
        else:
            await ctx.send(f"üìò **–ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**\n{sample}")
    else:
        await ctx.send("‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /next")

@bot.command()
async def info(ctx):
    user_id = ctx.author.id
    session = user_sessions.get(user_id)
    if session and 'current_skill' in session:
        resources = generate_resources(session['current_skill'])
        if len(resources) > 2000:
            for i in range(0, len(resources), 2000):
                await ctx.send(resources[i:i+2000])
        else:
            await ctx.send(f"üìö **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏:**\n{resources}")
    else:
        await ctx.send("‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å /next")

@bot.event
async def on_message(message):
    await bot.process_commands(message)
    user_id = message.author.id
    if user_id in user_sessions and not message.author.bot:
        session = user_sessions[user_id]
        if 'current_question' in session and not message.content.startswith('/'):
            skill_row = session['current_skill']
            user_answer = message.content
            eval_response = evaluate_answer(skill_row, user_answer)
            await message.channel.send(f"üìä **–û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:**\n{eval_response}")
            session['results'].append(eval_response)
            session['current'] += 1

# === RUN ===
bot.run(DISCORD_BOT_TOKEN)
